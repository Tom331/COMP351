
heat_template_version: 2014-10-16

description: HOT template for a single node

parameters:
    
  image_name:
    type: string
    description: Image Name
    default: "ubuntu"

  ssh_key_name:
    type: string
    description: OpenStack key name

  deploy_private_key:
    type: string
    description: Private Key for Deploy keypair

  public_keys_url:
    type: string
    description: url of public keys to add to authorized_keys file (refreshes every 15 minutes)

  deploy_repository:
    type: string
    description: git repository of app to be deployed
    default: "https://cisgitlab.ufv.ca/201701COMP351/assign1skeleton.git"

  deploy_repository_host_key:
    type: string
    description: host key of git server

  deploy_executable:
    type: string

  public_net:
    type: string
    description: public network 
    default: "ssh-proxy"    
   
  private_net:
    type: string
    description: private network
    default: "default"

  setup_runcmd_url:
    type: string
    description: url of runcmd script to set proxy, install docker, etc.
    default: "https://cisgitlab.ufv.ca/201701COMP351AB1/heat-templates/raw/master/heat-onehost-proxied-runcmd.sh"


resources:

  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: port}

  host:
    type: OS::Nova::Server
    properties:
      name: {get_param: 'OS::stack_name' }
      key_name: { get_param: ssh_key_name }
      config_drive: true
      image: { get_param: image_name }
      flavor: m1.small
      networks:
        - port: { get_resource: port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config

            hostname: $STACK_NAME
            manage_etc_hosts: true

            groups:
            - docker: [ubuntu]

            users:
            - default

            write_files:
            - owner: root:root
              path: /etc/cron.d/refresh_keys
              permissions: '0644'
              content: |
                # refresh authorized keys every 15 minutes
                '*/15 * * * * root /usr/local/bin/refresh_keys.sh >/dev/null 2>&1'
                # this file requires a newline on the last line

            - owner: root:root
              path: /usr/local/bin/refresh_keys.sh
              permissions: '0755'
              content: |
                #!/usr/bin/env bash
                # exit if KEYS_URL is blank
                [ -z "$KEYS_URL" ] && exit 0

                # fetch new copy of public keys
                rm -f /tmp/fetched_keys || exit 1
                touch /tmp/fetched_keys || exit 1
                chmod 0600 /tmp/fetched_keys || exit 1
                curl $KEYS_URL > /tmp/fetched_keys

                # update every authorized_keys file
                cd /home
                for fn in * ; do
                [ -e "${fn}/.ssh/authorized_keys" ] && {
                    rm -f /tmp/$$authorized_keys
                    touch /tmp/$$authorized_keys
                    chmod 0600 /tmp/$$authorized_keys
                    cat "${fn}/.ssh/authorized_keys" > /tmp/$$authorized_keys
                    cat /tmp/fetched_keys >> /tmp/$$authorized_keys
                    sort -u /tmp/$$authorized_keys > "${fn}/.ssh/authorized_keys"
                    rm -f /tmp/$$authorized_keys
                }
                rm -f /tmp/fetched_keys
                done
            - owner: root:root
              path: /root/.ssh/id_ecdsa
              permissions: '0600'
              content: "$DEPLOY_PRIVATE_KEY"
            - owner: root:root
              path: /root/.ssh/known_hosts
              permissions: '0600'
              content: "$DEPLOY_REPOSITORY_HOST_KEY"

            apt:
              # prevent the sources section from disabling the default repos
              # preserve_sources_list: true

              sources:

                docker.list:
                  source: "deb http://apt.dockerproject.org/repo ubuntu-$RELEASE main"
                  keyid: 58118E89F3A912897C070ADBF76221572C52609D
                  keyserver: ha.pool.sks-keyservers.net

            runcmd:
            # set permissions in case write_files above created .ssh
            - chmod 0700 /root/.ssh
            # replace % with newlines to put private key in correct format 
            - sed -i 's/%/\n/g' /root/.ssh/id_ecdsa
            # retrieve script to setup proxy, and install docker and docker-compose
            - curl $SETUP_RUNCMD_URL -o /root/runcmd.sh
            - bash /root/runcmd.sh
            # clone application and run it
            - mkdir -p /code
            - cd / && git clone $DEPLOY_REPOSITORY /code
            - cd /code && bash $DEPLOY_EXECUTABLE
            # - curl YOURCUSTOM_URL -o /root/custom.sh
            # - /root/custom.sh
            # in custom.sh, you can add deploy keys if desired
            # or use public repositories...
            # - git clone https://repository_url /code
            # - cd /code && docker-compose up -d
          params:
            $SETUP_RUNCMD_URL: {get_param: setup_runcmd_url }
            $DEPLOY_REPOSITORY: {get_param: deploy_repository }
            $DEPLOY_REPOSITORY_HOST_KEY: {get_param: deploy_repository_host_key }
            $DEPLOY_EXECUTABLE: {get_param: deploy_executable }
            $STACK_NAME: {get_param: 'OS::stack_name'}
            $KEYS_URL : {get_param: public_keys_url }
            $DEPLOY_PRIVATE_KEY: {get_param: deploy_private_key}
